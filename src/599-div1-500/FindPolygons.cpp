#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <numeric>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <cassert>
#include <cstdarg>
#include <sys/time.h>
#include <fstream>
//#include "cout.h"

using namespace std;

#define SZ(x) ((int)x.size())
#define MSET(x,a) memset(x, a, (int)sizeof(x))
#define PB push_back
#define VI vector < int >
#define PII pair < int, int >
#define LL long long
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(), (v).end()
#define FIT(it,v) for (typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define OUT(A) cout << #A << " = "<< (A) << endl
#define OUT2(A, B) cout << "(" << #A << ", " << #B << ") = (" << (A) << ", "<< (B) << ")" << endl
template<class T> void chmin(T &t, T f) { if (t > f) t = f; } 
template<class T> void chmax(T &t, T f) { if (t < f) t = f; } 

const int maxl = 2510;
int sq[13000000];
//set <int> sqs;
vector < PII > goodpoints;
int m[5010];
const int INF = (1<<29);


double EPS = 1e-10;

double add(double a, double b){
    if(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;
    return a + b;
}
struct P{
    double x, y;
    P() {}
    P(double x, double y) : x(x), y(y){
    }
    P operator + (P p){
        return P(add(x, p.x), add(y, p.y));
    }
    P operator - (P p){
        return P(add(x, -p.x), add(y, -p.y));
    }
    P operator * (double d){
        return P(x*d, y*d);
    }
    double dot(P p){ // 内積
        return add(x*p.x, y*p.y);
    }
    double det(P p){ // 外積
        return add(x*p.y, -y*p.x);
    }
};

double ccw(P p1, P p2, P p3){
    return (p2-p1).det(p3-p1);
}

void dmp(){
//    sqs.clear();
    MSET(sq, -1);
    for(int i = 1; i <= 2510; i++) sq[i*i] = i;
    goodpoints.clear();
    REP(i, 2510) REP(j, 2510) if(!(i == 0 && j == 0) && sq[i*i + j*j] > 0) goodpoints.push_back(make_pair(i, j));
    REP(i, 5010) m[i] = INF;
    REP(i, SZ(goodpoints)) REP(j, SZ(goodpoints)) if(i != j){
        P p1 = P(goodpoints[i].first, goodpoints[i].second);
        P p2 = P(goodpoints[j].first, goodpoints[j].second);
        P p3 = P(0, 0);
        if(ccw(p1, p2, p3) == 0) continue;
        int xx = p1.x - p2.x;
        int yy = p1.y - p2.y;
        if(sq[xx*xx + yy*yy] > 0){
            int l1 = sq[(int)(p1.x*p1.x + p1.y*p1.y)];
            int l2 = sq[(int)(p2.x*p2.x + p2.y*p2.y)];
            int l3 = sq[xx*xx + yy*yy];
            int mx = max(l1, (max(l2, l3)));
            int mn = min(l1, (min(l2, l3)));
            if(l1+l2+l3 < 5010) chmin(m[l1+l2+l3], mx - mn);
        }
    }
    REP(i, 5010) {
        if(m[i] != INF) cout << "m[" << i << "] = " << m[i] << "; ";
    }
    cout << endl;
}

void make(){
    m[12] = 2; m[16] = 1; m[18] = 3; m[24] = 4; m[30] = 8; m[32] = 2; m[36] = 3; m[40] = 9; m[42] = 2; m[44] = 9; m[48] = 3; m[50] = 1; m[54] = 8; m[56] = 18; m[60] = 10; m[64] = 4; m[66] = 19; m[68] = 9; m[70] = 9; m[72] = 6; m[76] = 18; m[78] = 22; m[80] = 5; m[84] = 4; m[88] = 18; m[90] = 11; m[96] = 6; m[98] = 11; m[100] = 2; m[104] = 15; m[108] = 9; m[110] = 27; m[112] = 7; m[114] = 26; m[120] = 20; m[126] = 6; m[128] = 8; m[130] = 11; m[132] = 22; m[136] = 18; m[140] = 18; m[144] = 9; m[150] = 3; m[152] = 36; m[154] = 31; m[156] = 2; m[160] = 10; m[162] = 3; m[164] = 32; m[168] = 8; m[170] = 41; m[172] = 25; m[174] = 56; m[176] = 11; m[180] = 15; m[182] = 47; m[186] = 46; m[190] = 11; m[192] = 12; m[196] = 1; m[198] = 33; m[200] = 4; m[204] = 27; m[208] = 13; m[210] = 10; m[216] = 18; m[220] = 9; m[222] = 26; m[224] = 14; m[228] = 22; m[230] = 39; m[232] = 63; m[234] = 32; m[236] = 50; m[238] = 40; m[240] = 15; m[242] = 13; m[248] = 89; m[250] = 5; m[252] = 12; m[256] = 11; m[258] = 22; m[260] = 22; m[264] = 44; m[266] = 29; m[268] = 49; m[270] = 19; m[272] = 17; m[276] = 46; m[280] = 36; m[286] = 46; m[288] = 11; m[290] = 51; m[292] = 72; m[294] = 14; m[296] = 99; m[300] = 6; m[304] = 19; m[306] = 29; m[308] = 62; m[310] = 63; m[312] = 4; m[318] = 103; m[320] = 20; m[322] = 25; m[324] = 6; m[328] = 34; m[330] = 49; m[332] = 81; m[336] = 16; m[338] = 11; m[340] = 45; m[342] = 57; m[344] = 50; m[348] = 58; m[350] = 7; m[352] = 22; m[354] = 91; m[356] = 81; m[360] = 30; m[364] = 38; m[366] = 74; m[368] = 23; m[370] = 81; m[372] = 26; m[374] = 72; m[378] = 18; m[380] = 22; m[384] = 24; m[388] = 72; m[390] = 33; m[392] = 2; m[396] = 33; m[400] = 8; m[402] = 122; m[406] = 113; m[408] = 50; m[410] = 117; m[414] = 69; m[416] = 26; m[418] = 61; m[420] = 20; m[424] = 135; m[428] = 98; m[430] = 152; m[432] = 27; m[434] = 100; m[438] = 46; m[440] = 17; m[442] = 81; m[444] = 52; m[448] = 28; m[450] = 9; m[452] = 81; m[456] = 44; m[460] = 49; m[462] = 22; m[464] = 29; m[468] = 6; m[470] = 51; m[472] = 100; m[474] = 133; m[476] = 27; m[480] = 26; m[484] = 13; m[486] = 9; m[488] = 47; m[490] = 55; m[492] = 82; m[494] = 72; m[496] = 31; m[498] = 158; m[500] = 10; m[504] = 24; m[506] = 27; m[510] = 77; m[512] = 22; m[516] = 44; m[518] = 47; m[520] = 44; m[522] = 52; m[524] = 81; m[528] = 33; m[530] = 111; m[532] = 58; m[536] = 98; m[540] = 28; m[544] = 34; m[546] = 26; m[548] = 128; m[550] = 11; m[552] = 92; m[556] = 121; m[558] = 93; m[560] = 35; m[564] = 94; m[570] = 33; m[572] = 36; m[574] = 136; m[576] = 3; m[578] = 23; m[580] = 102; m[582] = 2; m[584] = 144; m[588] = 3; m[590] = 117; m[592] = 37; m[594] = 25; m[598] = 200; m[600] = 12; m[602] = 151; m[606] = 199; m[608] = 38; m[610] = 119; m[612] = 51; m[616] = 57; m[618] = 157; m[620] = 126; m[624] = 8; m[630] = 30; m[632] = 233; m[636] = 106; m[638] = 45; m[640] = 40; m[642] = 182; m[644] = 50; m[646] = 135; m[648] = 12; m[650] = 13; m[652] = 162; m[654] = 214; m[656] = 41; m[660] = 27; m[664] = 162; m[666] = 78; m[670] = 232; m[672] = 32; m[676] = 22; m[680] = 59; m[682] = 89; m[684] = 35; m[686] = 37; m[688] = 43; m[690] = 117; m[696] = 116; m[700] = 14; m[702] = 34; m[704] = 44; m[708] = 101; m[712] = 117; m[714] = 34; m[716] = 98; m[720] = 45; m[722] = 1; m[726] = 39; m[728] = 67; m[732] = 94; m[736] = 46; m[738] = 84; m[740] = 119; m[742] = 115; m[744] = 50; m[748] = 99; m[750] = 15; m[752] = 47; m[754] = 28; m[756] = 36; m[760] = 44; m[762] = 146; m[768] = 33; m[770] = 57; m[772] = 121; m[774] = 66; m[776] = 144; m[780] = 10; m[782] = 121; m[784] = 4; m[786] = 259; m[790] = 207; m[792] = 66; m[798] = 38; m[800] = 16; m[804] = 26; m[806] = 136; m[808] = 297; m[810] = 15; m[812] = 144; m[814] = 232; m[816] = 49; m[820] = 160; m[824] = 306; m[826] = 51; m[828] = 62; m[830] = 159; m[832] = 52; m[834] = 22; m[836] = 67; m[840] = 40; m[844] = 162; m[846] = 141; m[848] = 53; m[850] = 17; m[852] = 142; m[854] = 143; m[856] = 196; m[858] = 61; m[860] = 125; m[864] = 33; m[868] = 187; m[870] = 153; m[872] = 273; m[874] = 14; m[876] = 92; m[880] = 34; m[882] = 33; m[884] = 117; m[888] = 104; m[890] = 58; m[894] = 296; m[896] = 38; m[900] = 18; m[902] = 73; m[904] = 79; m[906] = 286; m[908] = 225; m[910] = 77; m[912] = 57; m[918] = 50; m[920] = 98; m[924] = 44; m[928] = 58; m[930] = 52; m[932] = 225; m[936] = 12; m[938] = 256; m[940] = 102; m[942] = 118; m[944] = 42; m[946] = 202; m[948] = 22; m[950] = 19; m[952] = 54; m[954] = 91; m[960] = 52; m[962] = 131; m[964] = 169; m[966] = 46; m[968] = 26; m[972] = 18; m[976] = 61; m[978] = 262; m[980] = 5; m[984] = 102; m[986] = 151; m[988] = 108; m[990] = 121; m[992] = 62; m[994] = 200; m[996] = 128; m[1000] = 20; m[1004] = 242; m[1008] = 48; m[1010] = 244; m[1012] = 54; m[1014] = 33; m[1016] = 354; m[1020] = 135; m[1022] = 309; m[1024] = 13; m[1026] = 107; m[1028] = 225; m[1030] = 147; m[1032] = 88; m[1034] = 131; m[1036] = 94; m[1038] = 271; m[1040] = 65; m[1044] = 87; m[1048] = 162; m[1050] = 21; m[1054] = 166; m[1056] = 66; m[1058] = 11; m[1060] = 222; m[1062] = 177; m[1064] = 116; m[1066] = 209; m[1068] = 169; m[1070] = 248; m[1072] = 67; m[1074] = 326; m[1078] = 91; m[1080] = 56; m[1086] = 314; m[1088] = 54; m[1090] = 147; m[1092] = 14; m[1096] = 256; m[1098] = 119; m[1100] = 22; m[1102] = 200; m[1104] = 55; m[1106] = 268; m[1110] = 130; m[1112] = 242; m[1116] = 78; m[1118] = 246; m[1120] = 70; m[1122] = 89; m[1124] = 200; m[1128] = 95; m[1130] = 329; m[1132] = 162; m[1134] = 21; m[1136] = 71; m[1140] = 66; m[1144] = 72; m[1148] = 174; m[1150] = 23; m[1152] = 6; m[1156] = 11; m[1158] = 362; m[1160] = 98; m[1162] = 163; m[1164] = 4; m[1166] = 245; m[1168] = 73; m[1170] = 99; m[1176] = 6; m[1178] = 175; m[1180] = 234; m[1182] = 344; m[1184] = 74; m[1188] = 50; m[1190] = 127; m[1192] = 153; m[1194] = 349; m[1196] = 158; m[1200] = 24; m[1204] = 175; m[1206] = 201; m[1208] = 449; m[1210] = 65; m[1212] = 188; m[1216] = 63; m[1218] = 58; m[1220] = 238; m[1222] = 226; m[1224] = 102; m[1228] = 289; m[1230] = 127; m[1232] = 62; m[1236] = 74; m[1240] = 179; m[1242] = 77; m[1246] = 344; m[1248] = 16; m[1250] = 25; m[1252] = 288; m[1254] = 157; m[1256] = 255; m[1258] = 55; m[1260] = 60; m[1264] = 79; m[1266] = 166; m[1270] = 369; m[1272] = 212; m[1274] = 128; m[1276] = 90; m[1278] = 213; m[1280] = 55; m[1284] = 200; m[1288] = 100; m[1290] = 110; m[1292] = 137; m[1296] = 24; m[1298] = 296; m[1300] = 26; m[1302] = 62; m[1304] = 324; m[1308] = 142; m[1310] = 333; m[1312] = 82; m[1314] = 123; m[1316] = 297; m[1320] = 51; m[1324] = 169; m[1326] = 61; m[1328] = 83; m[1330] = 77; m[1332] = 111; m[1334] = 289; m[1338] = 338; m[1340] = 91; m[1342] = 351; m[1344] = 64; m[1348] = 288; m[1350] = 27; m[1352] = 44; m[1356] = 226; m[1360] = 85; m[1362] = 427; m[1364] = 129; m[1368] = 70; m[1370] = 387; m[1372] = 7; m[1374] = 26; m[1376] = 86; m[1378] = 136; m[1380] = 147; m[1384] = 495; m[1386] = 66; m[1388] = 338; m[1390] = 131; m[1392] = 87; m[1394] = 77; m[1400] = 28; m[1404] = 18; m[1406] = 98; m[1408] = 88; m[1410] = 109; m[1412] = 225; m[1414] = 181; m[1416] = 202; m[1420] = 494; m[1422] = 237; m[1424] = 89; m[1426] = 195; m[1428] = 68; m[1430] = 121; m[1432] = 196; m[1440] = 55; m[1442] = 197; m[1444] = 2; m[1446] = 286; m[1448] = 119; m[1450] = 29; m[1452] = 39; m[1456] = 91; m[1458] = 27; m[1460] = 360; m[1462] = 263; m[1464] = 141; m[1470] = 8; m[1472] = 92; m[1474] = 397; m[1476] = 83; m[1480] = 178; m[1482] = 85; m[1484] = 153; m[1488] = 93; m[1490] = 556; m[1494] = 249; m[1496] = 175; m[1498] = 328; m[1500] = 30; m[1504] = 94; m[1506] = 494; m[1508] = 56; m[1510] = 421; m[1512] = 72; m[1516] = 361; m[1518] = 81; m[1520] = 88; m[1524] = 214; m[1526] = 236; m[1530] = 93; m[1534] = 371; m[1536] = 66; m[1540] = 63; m[1544] = 242; m[1548] = 129; m[1550] = 31; m[1552] = 49; m[1554] = 74; m[1558] = 264; m[1560] = 20; m[1562] = 139; m[1564] = 207; m[1566] = 47; m[1568] = 8; m[1570] = 279; m[1572] = 230; m[1576] = 585; m[1580] = 133; m[1582] = 89; m[1584] = 92; m[1586] = 350; m[1590] = 333; m[1592] = 594; m[1596] = 46; m[1598] = 456; m[1600] = 32; m[1602] = 231; m[1604] = 392; m[1606] = 712; m[1608] = 52; m[1610] = 125; m[1612] = 85; m[1614] = 511; m[1616] = 87; m[1620] = 30; m[1624] = 288; m[1626] = 242; m[1628] = 333; m[1630] = 328; m[1632] = 98; m[1634] = 65; m[1636] = 288; m[1638] = 78; m[1640] = 170; m[1644] = 242; m[1648] = 64; m[1650] = 33; m[1652] = 102; m[1656] = 124; m[1660] = 318; m[1662] = 122; m[1664] = 104; m[1666] = 58; m[1668] = 44; m[1670] = 461; m[1672] = 134; m[1674] = 161; m[1676] = 338; m[1680] = 23; m[1682] = 13; m[1688] = 324; m[1690] = 55; m[1692] = 126; m[1694] = 91; m[1696] = 106; m[1698] = 458; m[1700] = 34; m[1702] = 392; m[1704] = 284; m[1708] = 286; m[1710] = 99; m[1712] = 107; m[1716] = 22; m[1720] = 250; m[1722] = 82; m[1728] = 9; m[1730] = 249; m[1732] = 361; m[1734] = 69; m[1736] = 89; m[1738] = 376; m[1740] = 142; m[1742] = 311; m[1744] = 109; m[1746] = 6; m[1748] = 28; m[1750] = 35; m[1752] = 184; m[1758] = 536; m[1760] = 68; m[1764] = 9; m[1768] = 142; m[1770] = 274; m[1772] = 441; m[1776] = 111; m[1778] = 257; m[1780] = 116; m[1782] = 33; m[1784] = 642; m[1786] = 108; m[1788] = 235; m[1790] = 477; m[1792] = 76; m[1794] = 127; m[1796] = 441; m[1798] = 347; m[1800] = 36; m[1802] = 147; m[1804] = 146; m[1806] = 86; m[1808] = 113; m[1810] = 423; m[1812] = 118; m[1816] = 450; m[1818] = 260; m[1820] = 127; m[1824] = 114; m[1826] = 333; m[1828] = 288; m[1830] = 307; m[1832] = 579; m[1834] = 403; m[1836] = 100; m[1840] = 81; m[1842] = 358; m[1846] = 202; m[1848] = 88; m[1850] = 37; m[1854] = 309; m[1856] = 116; m[1860] = 104; m[1862] = 200; m[1864] = 315; m[1868] = 242; m[1870] = 360; m[1872] = 24; m[1876] = 47; m[1878] = 142; m[1880] = 204; m[1884] = 236; m[1886] = 75; m[1888] = 84; m[1890] = 47; m[1892] = 189; m[1896] = 44; m[1898] = 105; m[1900] = 38; m[1902] = 559; m[1904] = 108; m[1908] = 159; m[1914] = 91; m[1918] = 131; m[1920] = 104; m[1922] = 47; m[1924] = 242; m[1926] = 321; m[1928] = 338; m[1932] = 92; m[1936] = 23; m[1938] = 199; m[1940] = 360; m[1944] = 36; m[1946] = 340; m[1950] = 39; m[1952] = 122; m[1956] = 74; m[1958] = 181; m[1960] = 10; m[1962] = 180; m[1964] = 441; m[1968] = 123; m[1970] = 178; m[1972] = 261; m[1974] = 94; m[1976] = 216; m[1978] = 199; m[1980] = 81; m[1984] = 124; m[1986] = 362; m[1988] = 337; m[1990] = 469; m[1992] = 256; m[1996] = 450; m[1998] = 139; m[2000] = 40; m[2002] = 230; m[2004] = 334; m[2006] = 247; m[2008] = 484; m[2010] = 283; m[2014] = 297; m[2016] = 77; m[2020] = 488; m[2022] = 482; m[2024] = 108; m[2028] = 26; m[2030] = 254; m[2032] = 127; m[2034] = 207; m[2040] = 37; m[2044] = 477; m[2046] = 64; m[2048] = 26; m[2050] = 41; m[2052] = 105; m[2054] = 283; m[2056] = 450; m[2058] = 83; m[2060] = 294; m[2064] = 129; m[2068] = 137; m[2070] = 253; m[2072] = 188; m[2074] = 77; m[2076] = 317; m[2080] = 49; m[2082] = 547; m[2084] = 512; m[2086] = 512; m[2088] = 78; m[2090] = 121; m[2092] = 361; m[2094] = 502; m[2096] = 99; m[2100] = 42; m[2106] = 39; m[2108] = 242; m[2110] = 152; m[2112] = 91; m[2114] = 505; m[2116] = 22; m[2120] = 167; m[2124] = 177; m[2128] = 61; m[2130] = 512; m[2132] = 187; m[2134] = 248; m[2136] = 338; m[2140] = 490; m[2142] = 102; m[2144] = 134; m[2146] = 355; m[2148] = 294; m[2150] = 43; m[2152] = 238; m[2156] = 11; m[2158] = 574; m[2160] = 112; m[2162] = 126; m[2166] = 3; m[2168] = 738; m[2170] = 223; m[2172] = 2; m[2176] = 108; m[2178] = 3; m[2180] = 294; m[2184] = 28; m[2188] = 529; m[2190] = 230; m[2192] = 137; m[2196] = 183; m[2198] = 659; m[2200] = 44; m[2202] = 718; m[2204] = 400; m[2208] = 110; m[2210] = 187; m[2212] = 536; m[2214] = 187; m[2216] = 345; m[2220] = 133; m[2222] = 544; m[2224] = 139; m[2226] = 106; m[2230] = 152; m[2232] = 150; m[2236] = 257; m[2238] = 698; m[2240] = 140; m[2242] = 419; m[2244] = 178; m[2248] = 400; m[2250] = 45; m[2252] = 338; m[2254] = 175; m[2256] = 141; m[2260] = 405; m[2262] = 84; m[2264] = 324; m[2266] = 531; m[2268] = 42; m[2270] = 521; m[2272] = 142; m[2274] = 694; m[2276] = 441; m[2278] = 216; m[2280] = 132; m[2282] = 437; m[2284] = 450; m[2286] = 381; m[2288] = 116; m[2290] = 524; m[2292] = 382; m[2294] = 239; m[2296] = 238; m[2300] = 46; m[2304] = 12; m[2308] = 289; m[2310] = 37; m[2312] = 22; m[2314] = 261; m[2316] = 286; m[2318] = 606; m[2320] = 145; m[2322] = 198; m[2324] = 326; m[2328] = 8; m[2330] = 483; m[2332] = 477; m[2334] = 631; m[2336] = 146; m[2340] = 30; m[2344] = 855; m[2346] = 91; m[2348] = 578; m[2350] = 47; m[2352] = 12; m[2354] = 573; m[2356] = 350; m[2358] = 305; m[2360] = 468; m[2364] = 394; m[2366] = 77; m[2368] = 148; m[2370] = 422; m[2372] = 512; m[2376] = 100; m[2378] = 289; m[2380] = 135; m[2382] = 362; m[2384] = 86; m[2388] = 218; m[2392] = 155; m[2394] = 114; m[2398] = 621; m[2400] = 48; m[2404] = 529; m[2408] = 350; m[2410] = 239; m[2412] = 78; m[2414] = 407; m[2416] = 90; m[2418] = 218; m[2420] = 65; m[2422] = 158; m[2424] = 376; m[2430] = 45; m[2432] = 126; m[2436] = 116; m[2438] = 309; m[2440] = 235; m[2442] = 161; m[2444] = 452; m[2448] = 49; m[2450] = 49; m[2454] = 626; m[2456] = 578; m[2460] = 254; m[2464] = 124; m[2466] = 224; m[2468] = 392; m[2470] = 143; m[2472] = 148; m[2476] = 450; m[2478] = 118; m[2480] = 155; m[2482] = 756; m[2484] = 68; m[2486] = 567; m[2490] = 301; m[2492] = 567; m[2494] = 184; m[2496] = 32; m[2500] = 37; m[2502] = 66; m[2504] = 194; m[2506] = 199; m[2508] = 201; m[2510] = 747; m[2512] = 157; m[2514] = 811; m[2516] = 110; m[2520] = 120; m[2522] = 125; m[2526] = 358; m[2528] = 158; m[2530] = 131; m[2532] = 332; m[2534] = 229; m[2536] = 271; m[2538] = 259; m[2540] = 738; m[2542] = 413; m[2544] = 159; m[2546] = 567; m[2548] = 13; m[2550] = 51; m[2552] = 180; m[2556] = 213; m[2560] = 110; m[2562] = 122; m[2564] = 441; m[2568] = 371; m[2570] = 747; m[2572] = 625; m[2574] = 183; m[2576] = 161; m[2580] = 220; m[2584] = 241; m[2590] = 235; m[2592] = 48; m[2596] = 361; m[2598] = 817; m[2600] = 52; m[2604] = 124; m[2608] = 163; m[2610] = 260; m[2616] = 202; m[2618] = 248; m[2620] = 405; m[2622] = 42; m[2624] = 164; m[2626] = 64; m[2628] = 219; m[2630] = 568; m[2632] = 338; m[2634] = 94; m[2636] = 578; m[2640] = 102; m[2646] = 83; m[2648] = 338; m[2650] = 53; m[2652] = 34; m[2656] = 166; m[2658] = 686; m[2660] = 154; m[2662] = 70; m[2664] = 133; m[2666] = 361; m[2668] = 102; m[2670] = 174; m[2672] = 167; m[2674] = 325; m[2676] = 166; m[2678] = 331; m[2680] = 182; m[2682] = 351; m[2684] = 197; m[2686] = 552; m[2688] = 114; m[2690] = 307; m[2692] = 648; m[2696] = 525; m[2698] = 744; m[2700] = 54; m[2702] = 479; m[2704] = 1; m[2706] = 211; m[2710] = 783; m[2712] = 237; m[2714] = 209; m[2716] = 504; m[2718] = 453; m[2720] = 61; m[2724] = 392; m[2726] = 233; m[2728] = 258; m[2730] = 130; m[2732] = 441; m[2736] = 140; m[2738] = 23; m[2740] = 640; m[2742] = 814; m[2744] = 14; m[2748] = 52; m[2750] = 55; m[2752] = 172; m[2754] = 51; m[2756] = 272; m[2758] = 704; m[2760] = 294; m[2764] = 529; m[2766] = 824; m[2768] = 144; m[2770] = 639; m[2772] = 132; m[2774] = 455; m[2776] = 676; m[2778] = 526; m[2780] = 262; m[2782] = 653; m[2784] = 155; m[2786] = 740; m[2788] = 154; m[2790] = 156; m[2792] = 897; m[2794] = 465; m[2796] = 361; m[2800] = 56; m[2802] = 859; m[2806] = 189; m[2808] = 36; m[2810] = 199; m[2812] = 196; m[2814] = 134; m[2816] = 121; m[2820] = 218; m[2822] = 95; m[2824] = 450; m[2826] = 354; m[2828] = 100; m[2830] = 632; m[2832] = 126; m[2834] = 581; m[2838] = 203; m[2840] = 42; m[2842] = 199; m[2844] = 66; m[2848] = 178; m[2850] = 57; m[2852] = 390; m[2856] = 136; m[2860] = 117; m[2862] = 273; m[2864] = 179; m[2868] = 478; m[2870] = 32; m[2880] = 15; m[2882] = 621; m[2884] = 207; m[2886] = 194; m[2888] = 4; m[2890] = 115; m[2892] = 386; m[2896] = 181; m[2898] = 138; m[2900] = 58; m[2904] = 78; m[2910] = 10; m[2912] = 135; m[2914] = 330; m[2916] = 39; m[2920] = 221; m[2922] = 962; m[2924] = 202; m[2926] = 277; m[2928] = 98; m[2930] = 783; m[2934] = 489; m[2936] = 1097; m[2938] = 783; m[2940] = 15; m[2944] = 184; m[2946] = 854; m[2948] = 430; m[2950] = 59; m[2952] = 166; m[2954] = 736; m[2956] = 450; m[2958] = 175; m[2960] = 171; m[2964] = 38; m[2968] = 57; m[2970] = 125; m[2976] = 186; m[2980] = 707; m[2982] = 142; m[2984] = 825; m[2988] = 249; m[2990] = 197; m[2992] = 187; m[2994] = 26; m[2996] = 333; m[3000] = 60; m[3002] = 648; m[3006] = 501; m[3008] = 63; m[3010] = 299; m[3012] = 392; m[3014] = 518; m[3016] = 112; m[3020] = 637; m[3024] = 67; m[3026] = 509; m[3030] = 419; m[3032] = 722; m[3034] = 515; m[3036] = 162; m[3038] = 79; m[3040] = 13; m[3042] = 33; m[3044] = 729; m[3048] = 428; m[3050] = 61; m[3052] = 472; m[3054] = 1016; m[3056] = 191; m[3058] = 1053; m[3060] = 186; m[3066] = 146; m[3068] = 650; m[3070] = 1192; m[3072] = 39; m[3074] = 349; m[3076] = 648; m[3078] = 57; m[3080] = 119; m[3082] = 237; m[3084] = 514; m[3088] = 193; m[3090] = 441; m[3094] = 256; m[3096] = 258; m[3100] = 62; m[3102] = 343; m[3104] = 98; m[3108] = 22; m[3112] = 567; m[3114] = 403; m[3116] = 143; m[3120] = 40; m[3122] = 508; m[3124] = 278; m[3128] = 162; m[3132] = 94; m[3136] = 16; m[3138] = 982; m[3140] = 558; m[3144] = 460; m[3146] = 79; m[3148] = 625; m[3150] = 63; m[3152] = 197; m[3154] = 488; m[3156] = 526; m[3160] = 266; m[3162] = 344; m[3164] = 178; m[3168] = 121; m[3170] = 519; m[3172] = 242; m[3174] = 33; m[3176] = 975; m[3178] = 559; m[3180] = 530; m[3182] = 299; m[3184] = 199; m[3186] = 136; m[3190] = 83; m[3192] = 92; m[3196] = 382; m[3198] = 344; m[3200] = 64; m[3204] = 192; m[3206] = 120; m[3208] = 784; m[3210] = 463; m[3212] = 578; m[3216] = 104; m[3220] = 250; m[3222] = 328; m[3224] = 170; m[3228] = 538; m[3230] = 187; m[3232] = 174; m[3234] = 49; m[3236] = 800; m[3240] = 60; m[3244] = 450; m[3246] = 1034; m[3248] = 123; m[3250] = 65; m[3252] = 479; m[3256] = 350; m[3258] = 319; m[3260] = 656; m[3262] = 493; m[3264] = 162; m[3266] = 315; m[3268] = 130; m[3270] = 224; m[3272] = 576; m[3276] = 42; m[3278] = 593; m[3280] = 205; m[3282] = 506; m[3286] = 399; m[3288] = 484; m[3290] = 178; m[3294] = 357; m[3296] = 128; m[3298] = 756; m[3300] = 66; m[3302] = 369; m[3304] = 204; m[3306] = 212; m[3308] = 729; m[3310] = 507; m[3312] = 165; m[3318] = 158; m[3320] = 486; m[3322] = 690; m[3324] = 244; m[3328] = 143; m[3330] = 153; m[3332] = 17; m[3336] = 88; m[3340] = 721; m[3342] = 1064; m[3344] = 209; m[3346] = 339; m[3348] = 234; m[3350] = 67; m[3352] = 676; m[3354] = 73; m[3358] = 344; m[3360] = 46; m[3362] = 47; m[3364] = 26; m[3366] = 267; m[3368] = 254; m[3372] = 562; m[3376] = 211; m[3378] = 926; m[3380] = 110; m[3382] = 325; m[3384] = 252; m[3388] = 91; m[3390] = 371; m[3392] = 212; m[3396] = 118; m[3400] = 68; m[3402] = 63; m[3404] = 588; m[3406] = 597; m[3408] = 213; m[3410] = 351; m[3416] = 329; m[3420] = 175; m[3422] = 637; m[3424] = 214; m[3426] = 886; m[3428] = 729; m[3430] = 185; m[3432] = 44; m[3434] = 56; m[3436] = 841; m[3438] = 573; m[3440] = 215; m[3444] = 164; m[3450] = 69; m[3454] = 856; m[3456] = 18; m[3458] = 136; m[3460] = 498; m[3462] = 938; m[3464] = 435; m[3468] = 33; m[3470] = 463; m[3472] = 136; m[3474] = 461; m[3476] = 711; m[3478] = 729; m[3480] = 284; m[3484] = 622; m[3486] = 166; m[3488] = 209; m[3490] = 371; m[3492] = 12; m[3496] = 56; m[3498] = 589; m[3500] = 34; m[3502] = 216; m[3504] = 219; m[3510] = 53; m[3512] = 1121; m[3514] = 1013; m[3516] = 586; m[3520] = 136; m[3522] = 1099; m[3524] = 800; m[3526] = 595; m[3528] = 18; m[3530] = 843; m[3532] = 882; m[3534] = 22; m[3536] = 221; m[3538] = 184; m[3540] = 392; m[3542] = 189; m[3544] = 882; m[3546] = 532; m[3550] = 71; m[3552] = 222; m[3556] = 514; m[3560] = 232; m[3562] = 549; m[3564] = 66; m[3568] = 223; m[3570] = 170; m[3572] = 216; m[3576] = 459; m[3580] = 490; m[3582] = 597; m[3584] = 152; m[3586] = 245; m[3588] = 46; m[3592] = 882; m[3596] = 183; m[3598] = 1000; m[3600] = 33; m[3604] = 294; m[3606] = 526; m[3608] = 131; m[3610] = 5; m[3612] = 146; m[3614] = 610; m[3616] = 226; m[3618] = 221; m[3620] = 846; m[3624] = 236; m[3626] = 329; m[3628] = 882; m[3630] = 195; m[3632] = 227; m[3634] = 248; m[3636] = 303; m[3638] = 951; m[3640] = 254; m[3642] = 814; m[3648] = 189; m[3650] = 73; m[3652] = 218; m[3654] = 174; m[3656] = 576; m[3658] = 331; m[3660] = 470; m[3664] = 229; m[3666] = 133; m[3668] = 432; m[3670] = 359; m[3672] = 200; m[3678] = 1126; m[3680] = 162; m[3682] = 685; m[3684] = 506; m[3686] = 936; m[3688] = 783; m[3690] = 379; m[3692] = 404; m[3696] = 176; m[3698] = 13; m[3700] = 74; m[3704] = 1289; m[3706] = 451; m[3708] = 222; m[3710] = 387; m[3712] = 232; m[3714] = 214; m[3716] = 729; m[3718] = 121; m[3720] = 208; m[3724] = 19; m[3726] = 69; m[3728] = 233; m[3730] = 362; m[3732] = 622; m[3736] = 484; m[3738] = 178; m[3740] = 153; m[3744] = 48; m[3748] = 648; m[3750] = 75; m[3752] = 94; m[3756] = 284; m[3760] = 235; m[3762] = 201; m[3766] = 337; m[3768] = 472; m[3770] = 140; m[3772] = 150; m[3774] = 165; m[3776] = 168; m[3780] = 94; m[3782] = 905; m[3784] = 378; m[3786] = 674; m[3788] = 722; m[3790] = 597; m[3792] = 88; m[3794] = 860; m[3796] = 210; m[3798] = 498; m[3800] = 76; m[3804] = 634; m[3806] = 992; m[3808] = 216; m[3810] = 643; m[3812] = 512; m[3816] = 318; m[3818] = 238; m[3820] = 1127; m[3822] = 182; m[3824] = 239; m[3828] = 182; m[3830] = 427; m[3834] = 349; m[3836] = 262; m[3838] = 287; m[3840] = 165; m[3842] = 276; m[3844] = 11; m[3848] = 287; m[3850] = 77; m[3852] = 321; m[3854] = 539; m[3856] = 241; m[3858] = 314; m[3860] = 605; m[3864] = 184; m[3870] = 330; m[3872] = 46; m[3874] = 989; m[3876] = 148; m[3878] = 940; m[3880] = 382; m[3884] = 729; m[3886] = 340; m[3888] = 72; m[3890] = 591; m[3892] = 680; m[3894] = 757; m[3896] = 1458; m[3900] = 50; m[3904] = 244; m[3906] = 115; m[3908] = 968; m[3910] = 551; m[3912] = 148; m[3914] = 389; m[3916] = 362; m[3918] = 1231; m[3920] = 20; m[3922] = 512; m[3924] = 327; m[3926] = 1182; m[3928] = 882; m[3930] = 706; m[3934] = 733; m[3936] = 246; m[3938] = 415; m[3940] = 356; m[3942] = 369; m[3944] = 291; m[3948] = 145; m[3950] = 79; m[3952] = 247; m[3954] = 1171; m[3956] = 398; m[3960] = 153; m[3962] = 163; m[3966] = 122; m[3968] = 248; m[3970] = 1161; m[3972] = 507; m[3976] = 473; m[3978] = 183; m[3980] = 938; m[3982] = 664; m[3984] = 249; m[3990] = 190; m[3992] = 900; m[3996] = 278; m[4000] = 80; m[4002] = 209; m[4004] = 252; m[4008] = 668; m[4010] = 956; m[4012] = 319; m[4014] = 669; m[4016] = 224; m[4018] = 297; m[4020] = 130; m[4026] = 431; m[4028] = 502; m[4030] = 341; m[4032] = 21; m[4036] = 648; m[4038] = 1057; m[4040] = 651; m[4042] = 879; m[4044] = 334; m[4046] = 101; m[4048] = 216; m[4050] = 75; m[4056] = 52; m[4060] = 181; m[4062] = 1352; m[4064] = 254; m[4066] = 99; m[4068] = 241; m[4070] = 328; m[4072] = 1377; m[4074] = 14; m[4076] = 578; m[4080] = 74; m[4082] = 1179; m[4086] = 681; m[4088] = 670; m[4090] = 889; m[4092] = 128; m[4094] = 427; m[4096] = 52; m[4098] = 1358; m[4100] = 82; m[4102] = 393; m[4104] = 210; m[4108] = 566; m[4110] = 539; m[4112] = 257; m[4114] = 221; m[4116] = 21; m[4118] = 1807; m[4120] = 588; m[4122] = 78; m[4128] = 258; m[4130] = 107; m[4132] = 961; m[4134] = 408; m[4136] = 274; m[4140] = 131; m[4142] = 445; m[4144] = 259; m[4146] = 1318; m[4148] = 154; m[4150] = 83; m[4152] = 539; m[4154] = 189; m[4158] = 29; m[4160] = 98; m[4164] = 529; m[4168] = 837; m[4170] = 110; m[4172] = 1024; m[4176] = 156; m[4180] = 171; m[4182] = 231; m[4184] = 722; m[4186] = 249; m[4188] = 338; m[4190] = 331; m[4192] = 198; m[4194] = 608; m[4196] = 968; m[4200] = 84; m[4202] = 785; m[4204] = 882; m[4206] = 1064; m[4208] = 263; m[4210] = 1143; m[4212] = 54; m[4214] = 217; m[4216] = 484; m[4218] = 294; m[4220] = 304; m[4224] = 182; m[4228] = 125; m[4230] = 327; m[4232] = 44; m[4234] = 281; m[4236] = 675; m[4238] = 959; m[4240] = 265; m[4242] = 202; m[4248] = 354; m[4250] = 85; m[4254] = 934; m[4256] = 122; m[4260] = 710; m[4264] = 374; m[4266] = 323; m[4268] = 334; m[4270] = 384; m[4272] = 218; m[4278] = 585; m[4280] = 963; m[4284] = 204; m[4288] = 268; m[4290] = 233; m[4292] = 693; m[4294] = 481; m[4296] = 588; m[4298] = 401; m[4300] = 86; m[4302] = 717; m[4304] = 269; m[4308] = 718; m[4312] = 22; m[4316] = 612; m[4318] = 504; m[4320] = 165; m[4324] = 252; m[4326] = 206; m[4328] = 1023; m[4332] = 6; m[4334] = 497; m[4336] = 208; m[4338] = 435; m[4340] = 184; m[4342] = 467; m[4344] = 4; m[4346] = 627; m[4350] = 87; m[4352] = 187; m[4356] = 6; m[4360] = 322; m[4362] = 482; m[4364] = 1089; m[4366] = 32; m[4368] = 56; m[4370] = 70; m[4374] = 81; m[4376] = 1058; m[4378] = 103; m[4380] = 176; m[4384] = 274; m[4386] = 374; m[4388] = 1089; m[4390] = 1189; m[4392] = 366; m[4394] = 143; m[4396] = 1318; m[4398] = 1034; m[4400] = 88; m[4402] = 189; m[4404] = 454; m[4408] = 800; m[4410] = 24; m[4416] = 220; m[4418] = 11; m[4420] = 212; m[4422] = 299; m[4424] = 713; m[4428] = 249; m[4430] = 1169; m[4432] = 277; m[4434] = 1222; m[4438] = 1184; m[4440] = 266; m[4444] = 609; m[4446] = 255; m[4448] = 278; m[4450] = 89; m[4452] = 212; m[4454] = 287; m[4456] = 526; m[4460] = 304; m[4462] = 1027; m[4464] = 279; m[4466] = 315; m[4470] = 763; m[4472] = 514; m[4476] = 242; m[4480] = 139; m[4482] = 398; m[4484] = 729; m[4488] = 137; m[4490] = 418; m[4492] = 961; m[4494] = 214; m[4496] = 281; m[4498] = 621; m[4500] = 90; m[4504] = 676; m[4506] = 1202; m[4508] = 23; m[4510] = 365; m[4512] = 282; m[4514] = 781; m[4516] = 841; m[4518] = 753; m[4520] = 395; m[4522] = 453; m[4524] = 58; m[4526] = 1507; m[4528] = 283; m[4530] = 998; m[4532] = 388; m[4536] = 84; m[4540] = 1042; m[4542] = 838; m[4544] = 284; m[4548] = 166; m[4550] = 91; m[4552] = 693; m[4554] = 200; m[4556] = 432; m[4558] = 763; m[4560] = 264; m[4564] = 837; m[4568] = 900; m[4572] = 206; m[4576] = 232; m[4578] = 74; m[4580] = 1048; m[4582] = 441; m[4584] = 764; m[4588] = 467; m[4590] = 250; m[4592] = 226; m[4596] = 766; m[4598] = 81; m[4600] = 67; m[4602] = 584; m[4606] = 238; m[4608] = 24; m[4610] = 1684; m[4612] = 1152; m[4614] = 1369; m[4616] = 578; m[4620] = 74; m[4624] = 44; m[4626] = 704; m[4628] = 522; m[4630] = 639; m[4632] = 572; m[4634] = 1303; m[4636] = 809; m[4638] = 1448; m[4640] = 290; m[4642] = 512; m[4644] = 175; m[4646] = 629; m[4648] = 652; m[4650] = 93; m[4652] = 722; m[4654] = 549; m[4656] = 16; m[4658] = 749; m[4660] = 259; m[4662] = 222; m[4664] = 377; m[4668] = 778; m[4670] = 591; m[4672] = 292; m[4674] = 307; m[4676] = 1377; m[4680] = 60; m[4684] = 882; m[4686] = 417; m[4688] = 293; m[4690] = 409; m[4692] = 182; m[4696] = 1156; m[4698] = 87; m[4700] = 94; m[4704] = 24; m[4706] = 477; m[4708] = 413; m[4710] = 590; m[4712] = 343; m[4716] = 393; m[4718] = 201; m[4720] = 210; m[4722] = 1562; m[4726] = 223; m[4728] = 788; m[4730] = 538; m[4732] = 154; m[4734] = 789; m[4736] = 215; m[4738] = 601; m[4740] = 110; m[4744] = 1024; m[4746] = 226; m[4748] = 1089; m[4750] = 95; m[4752] = 200; m[4756] = 578; m[4758] = 142; m[4760] = 270; m[4764] = 724; m[4768] = 172; m[4770] = 455; m[4772] = 968; m[4774] = 488; m[4776] = 436; m[4780] = 1463; m[4782] = 1519; m[4784] = 299; m[4788] = 138; m[4794] = 710; m[4796] = 356; m[4800] = 96; m[4802] = 61; m[4804] = 1152; m[4806] = 401; m[4808] = 1058; m[4810] = 88; m[4812] = 625; m[4814] = 693; m[4816] = 301; m[4818] = 190; m[4820] = 124; m[4824] = 154; m[4826] = 163; m[4828] = 639; m[4830] = 230; m[4832] = 180; m[4836] = 62; m[4838] = 648; m[4840] = 130; m[4842] = 576; m[4844] = 316; m[4848] = 261; m[4850] = 97; m[4856] = 1721; m[4858] = 712; m[4860] = 90; m[4862] = 361; m[4864] = 67; m[4866] = 1514; m[4868] = 1089; m[4870] = 248; m[4872] = 199; m[4876] = 217; m[4878] = 726; m[4880] = 305; m[4884] = 322; m[4886] = 1297; m[4888] = 705; m[4890] = 791; m[4896] = 98; m[4898] = 359; m[4900] = 25; m[4902] = 195; m[4904] = 359; m[4906] = 929; m[4908] = 286; m[4910] = 1467; m[4912] = 307; m[4914] = 97; m[4920] = 508; m[4922] = 441; m[4926] = 1399; m[4928] = 248; m[4930] = 755; m[4932] = 343; m[4936] = 466; m[4938] = 1058; m[4940] = 286; m[4942] = 373; m[4944] = 192; m[4950] = 58; m[4952] = 900; m[4956] = 236; m[4958] = 323; m[4960] = 53; m[4962] = 1627; m[4964] = 657; m[4966] = 791; m[4968] = 121; m[4970] = 297; m[4972] = 439; m[4974] = 458; m[4976] = 311; m[4978] = 826; m[4980] = 602; m[4982] = 1134; m[4984] = 819; m[4986] = 366; m[4988] = 368; m[4990] = 1443; m[4992] = 64; m[4994] = 698; m[4996] = 961; m[4998] = 174; m[5000] = 74; m[5002] = 747; m[5004] = 132; m[5008] = 313;

}

class FindPolygons {
public:
   double minimumPolygon( int L ) {
//       dmp();
       
       if(L <= 3 || (L & 1)) return -1;
       
       REP(i, 5010) m[i] = INF;
       make();
       if(m[L] != INF) return m[L];
       
       if(L % 4 == 0) return 0;
       return 1;
   }
};

// BEGIN CUT HERE
namespace moj_harness {
	int run_test_case(int);
	void run_test(int casenum = -1, bool quiet = false) {
		if (casenum != -1) {
			if (run_test_case(casenum) == -1 && !quiet) {
				cerr << "Illegal input! Test case " << casenum << " does not exist." << endl;
			}
			return;
		}
		
		int correct = 0, total = 0;
		for (int i=0;; ++i) {
			int x = run_test_case(i);
			if (x == -1) {
				if (i >= 100) break;
				continue;
			}
			correct += x;
			++total;
		}
		
		if (total == 0) {
			cerr << "No test cases run." << endl;
		} else if (correct < total) {
			cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << endl;
		} else {
			cerr << "All " << total << " tests passed!" << endl;
		}
	}
	
	static const double MAX_DOUBLE_ERROR = 1e-9; static bool topcoder_fequ(double expected, double result) { if (isnan(expected)) { return isnan(result); } else if (isinf(expected)) { if (expected > 0) { return result > 0 && isinf(result); } else { return result < 0 && isinf(result); } } else if (isnan(result) || isinf(result)) { return false; } else if (fabs(result - expected) < MAX_DOUBLE_ERROR) { return true; } else { double mmin = min(expected * (1.0 - MAX_DOUBLE_ERROR), expected * (1.0 + MAX_DOUBLE_ERROR)); double mmax = max(expected * (1.0 - MAX_DOUBLE_ERROR), expected * (1.0 + MAX_DOUBLE_ERROR)); return result > mmin && result < mmax; } }
	double moj_relative_error(double expected, double result) { if (isnan(expected) || isinf(expected) || isnan(result) || isinf(result) || expected == 0) return 0; return fabs(result-expected) / fabs(expected); }
	
	int verify_case(int casenum, const double &expected, const double &received, clock_t elapsed) { 
		cerr << "Example " << casenum << "... "; 
		
		string verdict;
		vector<string> info;
		char buf[100];
		
		if (elapsed > CLOCKS_PER_SEC / 200) {
			sprintf(buf, "time %.2fs", elapsed * (1.0/CLOCKS_PER_SEC));
			info.push_back(buf);
		}
		
		if (topcoder_fequ(expected, received)) {
			verdict = "PASSED";
			double rerr = moj_relative_error(expected, received); 
			if (rerr > 0) {
				sprintf(buf, "relative error %.3e", rerr);
				info.push_back(buf);
			}
		} else {
			verdict = "FAILED";
		}
		
		cerr << verdict;
		if (!info.empty()) {
			cerr << " (";
			for (int i=0; i<(int)info.size(); ++i) {
				if (i > 0) cerr << ", ";
				cerr << info[i];
			}
			cerr << ")";
		}
		cerr << endl;
		
		if (verdict == "FAILED") {
			cerr << "    Expected: " << expected << endl; 
			cerr << "    Received: " << received << endl; 
		}
		
		return verdict == "PASSED";
	}

	int run_test_case(int casenum__) {
		switch (casenum__) {
		case 0: {
			int L                     = 4;
			double expected__         = 0.0;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 1: {
			int L                     = 5;
			double expected__         = -1.0;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 2: {
			int L                     = 12;
			double expected__         = 2.0;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 3: {
			int L                     = 4984;
			double expected__         = 819.0;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}

		// custom cases

/*      case 4: {
			int L                     = ;
			double expected__         = ;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
/*      case 5: {
			int L                     = ;
			double expected__         = ;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
/*      case 6: {
			int L                     = ;
			double expected__         = ;

			clock_t start__           = clock();
			double received__         = FindPolygons().minimumPolygon(L);
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
		default:
			return -1;
		}
	}
}
 

int main(int argc, char *argv[]) {
	if (argc == 1) {
		moj_harness::run_test();
	} else {
		for (int i=1; i<argc; ++i)
			moj_harness::run_test(atoi(argv[i]));
	}
}

/*
// PROBLEM STATEMENT
// 
Alice is a high school student.
One day, her teacher asked her to draw a simple polygon (see Notes for a definition).
The polygon must satisfy two conditions:

First, each of its vertices must be at a grid point.
(I.e., both coordinates of each vertex must be integers.)

Second, the perimeter of the polygon must be exactly equal to the integer L.

You are given the int L.
If there is no such polygon, return -1.
If there is at least one such polygon, find the one which has the least number of sides. If there are still more than one choice, find the one with the smallest possible difference between the lengths of its longest side and its shortest side. Return the difference between the lengths of its longest side and its shortest side.

DEFINITION
Class:FindPolygons
Method:minimumPolygon
Parameters:int
Returns:double
Method signature:double minimumPolygon(int L)


NOTES
-A simple polygon is a polygon such that no two consecutive sides are parallel and no two non-consecutive sides share a common point.
-Return values with absolute or relative error at most 1e-9 will be accepted as correct. 


CONSTRAINTS
-L will be between 1 and 5000, inclusive.


EXAMPLES

0)
4

Returns: 0.0

There is no triangle whose perimeter is 4, but there is a square.

1)
5

Returns: -1.0

There is no simple polygon that matches all the constraints.

2)
12

Returns: 2.0

There is a triangle whose sides are 3, 4, 5.

3)
4984

Returns: 819.0



*/

// END CUT HERE
